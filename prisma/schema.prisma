generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    firstName String
    lastName  String
    email     String   @unique
    avatarUrl String   @default("")
    role      Role?
    password  String   @default("")
    title     String   @default("")
    schoolId  String?
    subject   String   @default("")
    grade     String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    school     School?      @relation(fields: [schoolId], references: [id])
    quizzes    Quiz[]
    UserAnswer UserAnswer[]
}

enum Role {
    student
    teacher
    admin
}

model School {
    id      String @id @default(uuid())
    name    String
    address String
    city    String
    country String

    users User[]
}

model Quiz {
    id        String   @id @default(uuid())
    title     String
    subject   String
    grade     String
    coverImg  String?
    isPublic  Boolean
    status    Status
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    questions  Question[]
    UserAnswer UserAnswer[]
}

enum Status {
    unFinished
    finished
}

model Question {
    id        String       @id @default(uuid())
    title     String
    quizId    String
    time      Int?
    point     Int?
    type      QuestionType
    createdAt DateTime     @default(now())

    quiz       Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers    Answer[]
    UserAnswer UserAnswer[]
}

enum QuestionType {
    multipleChoice
    trueFalse
    fillInTheBlank
    shortAnswer
}

model Answer {
    id         String   @id @default(uuid())
    content    String
    imageUrl   String?
    isCorrect  Boolean
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    questionId String

    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model UserAnswer {
    id         String   @id @default(uuid())
    userId     String
    quizId     String
    questionId String
    answer     String
    isCorrect  Boolean
    createdAt  DateTime @default(now())

    user     User     @relation(fields: [userId], references: [id])
    quiz     Quiz     @relation(fields: [quizId], references: [id])
    question Question @relation(fields: [questionId], references: [id])
}
